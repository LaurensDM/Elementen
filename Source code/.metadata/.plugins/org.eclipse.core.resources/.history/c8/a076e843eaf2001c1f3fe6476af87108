package gui;

import java.util.Collections;
import java.util.List;

import domein.DomeinController;
import domein.Enemy;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import resources.HealthBar;
import resources.ResourceController;


//Responsable for battle mechanics
public class SpelScherm extends GridPane {

	private DomeinController dc;
	private int worldX;
	private int worldY;
	private String enemy;
	private String string = "";
	private ResourceController resources;
	private boolean defeated = false;
	private HealthBar healthBarEnemy;
	private HealthBar manaBar;
	private double maxHealth;
	private double maxMana;
	private ImageView wizard;
	private ImageView enemyImg;
	private Label player = new Label("Player");
	private Label lblEnemy = new Label();

	public SpelScherm(DomeinController dc, ResourceController resources, int x, int y) {
		this.dc = dc;
		this.resources = resources;
		buildGui();
	}

	private void buildGui() {
		this.setAlignment(Pos.BOTTOM_CENTER);
		this.setVgap(0);
		this.setHgap(300);
		this.setId("game");

		wizard = new ImageView(new Image(this.getClass().getResourceAsStream("/images/Wizard Stand.gif")));
		GridPane.setMargin(wizard, new Insets(50, 0, 0, 0));
		wizard.setFitWidth(125);
		wizard.setFitHeight(225);
		
		enemyImg = new ImageView();
		GridPane.setMargin(enemyImg, new Insets(50, 0, 0, 0));
		
		
		GridPane.setHalignment(player, HPos.CENTER);
		GridPane.setHalignment(lblEnemy, HPos.CENTER);
		
		this.add(wizard, 0, 2);
		this.add(enemyImg, 2, 2);

		this.add(player, 0, 0);
		this.add(lblEnemy, 2, 0);
		event();
	}

	void event() {
		List<String> enemies = Enemy.ENEMIES;
		Collections.shuffle(enemies);
		resources.playSoundEffect("");
		dc.startGame();
		dc.registerEnemy(enemies.get(0));

		lblEnemy.setText(dc.getEnemy());

		this.maxHealth = dc.getEnemyHealth();
		this.maxMana = dc.getManapool();
		healthBarEnemy = new HealthBar(maxHealth);
		healthBarEnemy.setId("enemyHealth");
		GridPane.setHalignment(healthBarEnemy, HPos.RIGHT);
		manaBar = new HealthBar(maxMana);
		manaBar.setId("mana");
		GridPane.setHalignment(manaBar, HPos.LEFT);
		this.add(healthBarEnemy, 2, 1);
		this.add(manaBar, 0, 1);

		healthBarEnemy.setVisible(true);
		manaBar.setVisible(true);

		enemy = dc.getEnemy();
		string = enemy;
		geefImageType(enemy);
		string += "\n" + dc.geefAffinity() + "\n";

	}

	public boolean enemyDefeated() {

		return defeated;
	}

	public void attackEvent(String type, boolean fullpower) {
		try {
			defeated = false;
			if (fullpower) {
				dc.useAllOutAttack();
				string += dc.attack(type);
				fullpower = false;
				wizard.setImage(new Image(this.getClass().getResourceAsStream("/images/Wizard Stand.gif")));
				wizard.setFitWidth(125);
				wizard.setFitHeight(225);
			} else {
				string += dc.attack(type);
			}

			
			if (dc.outOfMana() && dc.isDefeated()==false) {
				ScreenController.changeToGameOver(this, resources, dc);
			}
			

			if (dc.isDefeated()) {
				defeated = true;
				event();
			} else {
				string += dc.attackBack();
			}
		} catch (IllegalArgumentException e) {
			System.err.println(e.getLocalizedMessage());
		}
		updateHealth(dc.getEnemyHealth());
		updateMana(dc.getManapool());

	}

	private void updateHealth(double health) {
		if (health <= 0) {
			healthBarEnemy.updateProgress(0);
			return;
		}
		healthBarEnemy.updateProgress(health);
	}

	private void updateMana(double mana) {
		manaBar.updateProgress(mana);
	}

	private void geefImageType(String enemy) {
		String string = enemy.toLowerCase();
		if (string.contains("dragon")) {
			if (string.contains("fire")) {
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/redDragonFlying.gif")));
				adjustSize(300, 400);
				return;
			}
			if (string.contains("water")) {
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/waterDragon.gif")));
				adjustSize(300, 300);
				return;
			}
			if (string.contains("lightning")) {
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/lightningDragon.gif")));
			}
			if (string.contains("wind")) {
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/windDragon.gif")));
				adjustSize(300, 400);
				return;
			}
			if (string.contains("earth")) {
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/earthDragon.gif")));
				adjustSize(300, 400);
				return;
			}
			if (string.contains("gold")) {
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/goldenDragon.gif")));
				adjustSize(300, 350);
			}
			adjustSize(200, 300);
		} else if (string.contains("troll")) {
			if (string.contains("rock")) {
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/troll.gif")));
				adjustSize(300, 400);
				return;
			} else
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/normalTroll.gif")));
			adjustSize(200, 300);
		} else {
			if (string.contains("hob")) {
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/hobgoblin.gif")));
			} else
				enemyImg.setImage(new Image(getClass().getResourceAsStream("/images/Goblin_idle.gif")));
			adjustSize(100, 200);
		}
		enemyImg.setPreserveRatio(false);

	}

	private void adjustSize(double width, double height) {
		enemyImg.maxWidth(width);
		enemyImg.maxHeight(height);
		enemyImg.setFitHeight(height);
		enemyImg.setFitWidth(width);
	}

	public void changeWizard(Image image, boolean fullpower) {
		wizard.setImage(image);
		if (fullpower) {
			wizard.setFitWidth(225);
			wizard.setFitHeight(350);
		} else {
			wizard.setFitWidth(125);
			wizard.setFitHeight(225);
		}
	}

//	private Image adjustImage(Image image) {
//		PixelReader pixel = image.getPixelReader();
//		WritableImage wImage = new WritableImage((int) image.getWidth(), (int) image.getHeight());
//		PixelWriter pixelWriter = wImage.getPixelWriter();
//
//		for (int readY = 0; readY < image.getHeight(); readY++) {
//			for (int readX = 0; readX < image.getWidth(); readX++) {
//				Color color = pixel.getColor(readX, readY);
//
//				if (color.equals(Color.WHITE)) {
//					color = color.TRANSPARENT;
//				}
//				pixelWriter.setColor(readX, readY, color);
//			}
//
//		}
//		return wImage;
//	}

}
